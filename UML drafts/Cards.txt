
Card
- name : String
+ type : enum
-  description : String
- CardType : String
- FaceUp: boolean
-  price : int
+ Card ( String : name)<<constructor>>
- IsFaceUp( isFaceUp:boolean)
- destroyWithoutLosingLifepoints()
Monster
-  level : int
+ MonsterType : enum
- attack: int
-  defense : int
+ Attribute : enum
- hasEffect : boolean
- effectTypes : int []
- isEffectFinished : boolean
- isDefense : boolean
- isAlive : boolean
- isRitual: boolean
- canDefeatInBattle : boolean
- neededCardsForTribute : int
- canSummonOrSet : boolean
- canAddToHand : boolean
- canAddToDeck : boolean
- isUnDefeatableForOneAttack : boolean
- canAttack : boolean
+ Monster( name : String)<<constructor>>
+ Monster ( object : Object)<<copy constructor>>
- isTributeneeded() : boolean
- increaseAttack( amount : int) : void
- kill (): void
- setAttack(amount : int) : void
- beAGhost( card : Card):void
- backToLife(card  : Card) : void
Spell
+spellType : enum
- canSpecialSummon : boolean
-canAddToHand : boolean
- amountAllowedToAddHand : int
-isActive:boolean
- roundsToBeActive : int
-canSummonInOpponentTurn : boolean
-canDoDamage : boolean
damage: int
-activatesWhenSpell: boolean
-canAlterDamage : boolean
-setDamage(amount : int) : void
TRAP
- isActive : boolean
- roundsToBeActive : int
- canNegateAttack : boolean
- activatesWhenThereIsAttack: boolean
- activatesWhenFlipSummon : boolean
- activatesWhenSummon : boolean
- activatesWhenSpell : boolean
Public enum Type {
MONSTER,	
    SPELL,	   
TRAP;		
}
Public enum MonsterType {
	WARRIOR,	
	BEAST_WARRIOR,	
	FIEND,		
	AQUA,		
	BEAST,		
	PYRO,		
	SPELLCASTER,		
	THUNDER,		
	DRAGON,		
	MACHINE,		
	ROCK,		
	INSECT,		
	CYBERSE,		
	FAIRY,		
	SEA_SERPENT;		
}
Public enum Attribute {	
	DARK,		
	EARTH,		
	FIRE,		
         LIGHT,
	WATER,		
	WIND;		
}
Public enum spellType{
	EQUIP,		
	FIELD,		
	QUICK_PLAY,		
	RITUAL,		
	CONTINOUS,		
	COUNTER;		
}
Board methods
- flipSummon(card : Card): void
- howManyCardsOnField(identifier : int) : boolean
-isRitualSpell() : boolean
- selectForTribute( amount : int) : Card[]
- isTributeEnough( cards: Cards[] ,  amount : int) : boolean
- FlipACard(card : Card): void
-SelectForKill() :Card
-decreaseLifePoint(amount : int) : void
-setOrSummon(card : Card) : void
- getControlledCards(identifier : int) : Card[]
- getSpecialCardFromGraveYard(MonsterType : enum ,minimumLevel : int) Card
-getAttackOfFaceUpOnBoard() : int
-disableTraps() : void
-discard(card : Card) : void
- getCardFromBothGraveYards(name : String) : Card
-selectACardOfOpponent(name : String) : Card
-allSpellsAndTraps(identifier : int) : Card []
-getOpponentFaceUpCards() : Card []
- DestroyAllMonsters() : void
- increaseLifePoint(amount : int) : void
- decreaseLifePoint(amount : int) : void
-isSpellActivated() : boolean
-getAllTheMonsters() :Card[]
- destroySpells(amount :int) : void
-increaseAttackAndDefense(monsterType: enum [] ,amount: int) : void
-decreaseAttackAndDefense(monsterType : enum [] ,amount : int) : void
-setDifferentDefenceAndAttack(monsterType : enum [] , attack : int , defense : int) : void
-equipACard(monsterTypes : enum [] ,attack :int ,defense : int) : void
-endBattlePhase() : void
Deck  and hand methods
- addToDeckOrHand(Card card) : void
-findACard(spellType : enum) : Card
-getACard() : Card
-DiscardACardFromYourHand(card :Card) : void
-isACardAvailable( name : String)  : boolean
-selectARandomCardFromHand() : Card
Deck and hand fields
- canACardBeDrawn : boolean

